delta_prop <- melt(delta_summary[,c('Condition', 'gen_delta','unittower_delta','towermatch_delta', 'memory_delta','se_gen','se_unittower','se_towermatch','se_memory')], id.vars=1)
delta_prop
#graph deltas for each condition and task
ggplot(delta_prop, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
delta_prop <- melt(delta_summary[,c('Condition', 'gen_delta','unittower_delta','towermatch_delta', 'memory_delta')], id.vars=1)
delta_prop
delta_se <- x
delta_prop <- melt(delta_summary[,c('Condition', 'gen_delta','unittower_delta','towermatch_delta', 'memory_delta')], id.vars=1)
delta_prop
#graph deltas for each condition and task
ggplot(delta_prop, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank())
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
delta_prop <- melt(delta_summary[,c('Condition', 'gen_delta','unittower_delta','towermatch_delta', 'memory_delta')], id.vars=1)
delta_prop
#graph deltas for each condition and task
ggplot(delta_prop, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
delta_prop <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
delta_prop
#graph deltas for each condition and task
ggplot(delta_prop, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
dm <- merge(dm1,dm2)
dm
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
dm2
dm1
dm2
dm <- merge(dm1,dm2)
dm
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
dm <- merge(dm1,dm2)
colnames(dm2) <- c("Condition","variable2","value2")
dm
#graph deltas for each condition and task
ggplot(delta_prop, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
colnames(dm2) <- c("Condition","variable2","value2")
dm <- merge(dm1,dm2)
dm
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
colnames(dm2) <- c("Condition","variable2","value2")
dm <- merge(dm1,dm2)
dm
#graph deltas for each condition and task
ggplot(dm, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
geom_errorbar(aes(ymin=value-value2, ymax=value-value2))
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
colnames(dm2) <- c("Condition","variable2","value2")
dm <- merge(dm1,dm2)
dm
#graph deltas for each condition and task
ggplot(dm, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
geom_errorbar(aes(ymin=value-value2, ymax=value-value2))+
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
colnames(dm2) <- c("Condition","variable2","value2")
dm <- merge(dm1,dm2)
dm
#graph deltas for each condition and task
ggplot(dm, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
#geom_errorbar(aes(ymin=value-value2, ymax=value-value2))+
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
colnames(dm2) <- c("Condition","variable2","value2")
dm <- merge(dm1,dm2)
dm
#graph deltas for each condition and task
ggplot(dm, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
geom_errorbar(aes(ymin=value-value2, ymax=value+value2))+
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm <- melt(delta_summary, id.vars = c('Condition', 'gen_delta','towermatch_delta', 'memory_delta'), measure.vars = c('se_gen','se_towermatch','se_memory'))
dm
dm1 <- melt(delta_summary[,c('Condition', 'gen_delta','towermatch_delta', 'memory_delta')], id.vars=1)
dm2 <- melt(delta_summary[,c('Condition','se_gen','se_towermatch','se_memory')])
colnames(dm2) <- c("Condition","variable2","value2")
dm <- merge(dm1,dm2)
dm
#graph deltas for each condition and task
ggplot(dm, aes(x=variable, y=value,fill=Condition)) +
geom_bar(stat="identity", position="dodge") +
theme_bw() +
theme(text = element_text(size=16)) +
theme(legend.title = element_blank()) +
geom_errorbar(aes(ymin=value-value2, ymax=value+value2))+
scale_x_discrete(name="Tasks") +
scale_y_continuous(name="Change from Transfer to Post")
dm1 <- melt(delta_summary, id.vars = c('Condition'), measure.vars = c('gen_delta','towermatch_delta','memory_delta'))
dm1
dm2 <- melt(delta_summary, id.vars = c('Condition'),measure.vars=c('se_gen','se_towermatch','se_memory'))
dm2
dm <- merge(dm1,dm2)
dm
colnames(dm2) <- c('Condition','variable2','value2')
dm <- merge(dm1,dm2)
dm
dm <- melt(delta_summary, id.vars=c("Condition"), measure.vars = list(c("gen_delta","towermatch_delta","memory_delta"),c("se_gen","se_towermatch","se_memory")))
dm <- melt(delta_summary, id.vars="Condition", measure.vars = list(c("gen_delta","towermatch_delta","memory_delta"),c("se_gen","se_towermatch","se_memory")))
dm <- melt(delta_summary, id.vars=list(c("Condition","gen_delta","towermatch_delta","memory_delta")), measure.vars = c("se_gen","se_towermatch","se_memory"))
gen <- t.test(eg$delta_gen,variety$delta_gen)
tower <-t.test(eg$delta_tower,variety$delta_tower)
memory <-t.test(eg$delta_memory,variety$delta_memory)
gen
tower
memory
pic_summary <- summarise(pic_condition,
n = length(Condition),
female = length(which(Gender=="F")),
aab_learn = (length(which(AAB_Generation_Learn1==1))/length(Condition)),
aab_genpost = (length(which(AAB_Generation_Post==1))/length(Condition)),
aab_unittower = (length(which(AAB_UnitTower_Post==1))/length(Condition)),
aab_towermatch = (length(which(AAB_TowerMatch_Post==1))/length(Condition)),
aab_memory = (length(which(AAB_Memory==1))/length(Condition)),
abb_genpost = (length(which(ABB_Generation_Post==1))/length(Condition)),
abb_unittower = (length(which(ABB_UnitTower_Post==1))/length(Condition)),
abb_towermatch = (length(which(ABB_TowerMatch_Post==1))/length(Condition)),
abb_memory = (length(which(ABB_Memory==1))/length(Condition)),
mean_total = mean(Total),
stdev_total = sd(Total),
se_total = sd(Total)/sqrt(length(Condition)))
pic_summary
means <- summarise(pic_condition,
n = length(Condition),
aab_gen = mean(AAB_Generation_Post),
sd_aab_gen = sd(AAB_Generation_Post))
means
means <- summarise(pic_condition,
n = length(Condition),
#aab
aab_gen = mean(AAB_Generation_Post),
sd_aab_gen = sd(AAB_Generation_Post),
se_aab_gen = sd_aab_gen/sqrt(length(Condition)),
aab_tower = mean(AAB_TowerMatch_Post),
sd_aab_tower = sd(AAB_TowerMatch_Post),
se_aab_tower = sd_aab_/sqrt(length(Condition)),
aab_memory = mean(AAB_Memory_Post),
sd_aab_memory = sd(AAB_Memory_Post),
se_aab_memory = sd_aab_memory/sqrt(length(Condition)),)
means <- summarise(pic_condition,
n = length(Condition),
#aab
aab_gen = mean(AAB_Generation_Post),
sd_aab_gen = sd(AAB_Generation_Post),
se_aab_gen = sd_aab_gen/sqrt(length(Condition)),
aab_tower = mean(AAB_TowerMatch_Post),
sd_aab_tower = sd(AAB_TowerMatch_Post),
se_aab_tower = sd_aab_/sqrt(length(Condition)),
aab_memory = mean(AAB_Memory_Post),
sd_aab_memory = sd(AAB_Memory_Post),
se_aab_memory = sd_aab_memory/sqrt(length(Condition)))
means <- summarise(pic_condition,
n = length(Condition),
#aab
aab_gen = mean(AAB_Generation_Post),
sd_aab_gen = sd(AAB_Generation_Post),
se_aab_gen = sd_aab_gen/sqrt(length(Condition)),
aab_tower = mean(AAB_TowerMatch_Post),
sd_aab_tower = sd(AAB_TowerMatch_Post),
se_aab_tower = sd_aab_tower/sqrt(length(Condition)),
aab_memory = mean(AAB_Memory_Post),
sd_aab_memory = sd(AAB_Memory_Post),
se_aab_memory = sd_aab_memory/sqrt(length(Condition)))
means <- summarise(pic_condition,
n = length(Condition),
#aab
aab_gen = mean(AAB_Generation_Post),
sd_aab_gen = sd(AAB_Generation_Post),
se_aab_gen = sd_aab_gen/sqrt(length(Condition)),
aab_tower = mean(AAB_TowerMatch_Post),
sd_aab_tower = sd(AAB_TowerMatch_Post),
se_aab_tower = sd_aab_tower/sqrt(length(Condition)),
aab_memory = mean(AAB_Memory),
sd_aab_memory = sd(AAB_Memory),
se_aab_memory = sd_aab_memory/sqrt(length(Condition)))
means
means <- summarise(pic_condition,
n = length(Condition),
#aab
aab_gen = mean(AAB_Generation_Post),
sd_aab_gen = sd(AAB_Generation_Post),
se_aab_gen = sd_aab_gen/sqrt(length(Condition)),
aab_tower = mean(AAB_TowerMatch_Post),
sd_aab_tower = sd(AAB_TowerMatch_Post),
se_aab_tower = sd_aab_tower/sqrt(length(Condition)),
aab_memory = mean(AAB_Memory),
sd_aab_memory = sd(AAB_Memory),
se_aab_memory = sd_aab_memory/sqrt(length(Condition)),
#abb
abb_gen = mean(ABB_Generation_Post),
sd_abb_gen = sd(ABB_Generation_Post),
se_abb_gen = sd_abb_gen/sqrt(length(Condition)),
abb_tower = mean(ABB_TowerMatch_Post),
sd_abb_tower = sd(ABB_TowerMatch_Post),
se_abb_tower = sd_abb_tower/sqrt(length(Condition)),
abb_memory = mean(ABB_Memory),
sd_abb_memory = sd(ABB_Memory),
se_abb_memory = sd_abb_memory/sqrt(length(Condition)))
means
View(means)
#group within condition
eg <- pic_data %>%
filter(Condition=="EG")
variety <- pic_data %>%
filter(Condition=="Variety")
gen_delta <- t.test(eg$delta_gen,variety$delta_gen)
tower_delta <-t.test(eg$delta_tower,variety$delta_tower)
memory_delta <-t.test(eg$delta_memory,variety$delta_memory)
gen_delta
tower_delta
memory_delta
gen_mean <- t.test(eg$AAB_Generation_Post,variety$AAB_Generation_Post)
gen_mean
abb_gen_mean <- t.test(eg$ABB_Generation_Post,variety$ABB_Generation_Post)
#generation
aab_gen_mean <- t.test(eg$AAB_Generation_Post,variety$AAB_Generation_Post)
abb_gen_mean <- t.test(eg$ABB_Generation_Post,variety$ABB_Generation_Post)
#tower
aab_tower_mean <-t.test(eg$AAB_TowerMatch_Post,variety$AAB_TowerMatch_Post)
abb_tower_mean <-t.test(eg$ABB_TowerMatch_Post,variety$ABB_TowerMatch_Post)
#memory
aab_memory_mean <-t.test(eg$AAB_Memory,variety$AAB_Memory)
abb_memory_mean <-t.test(eg$ABB_Memory,variety$ABB_Memory)
aab_gen_mean
abb_gen_mean
aab_tower_mean
abb_tower_mean
aab_memory_mean
abb_memory_mean
getwd()
setwd("thinkinghats/")
#required libraries
library(ggplot2)
library(car)
library(dplyr)
library(lme4)
library(nlme)
library(reshape2)
library(pwr)
data <- read.table("order_sim_data.csv", sep=",", header=TRUE)
head(data)
by_condition <- groupby(data, condition)
data <- group_by(data, condition)
by_condition <- summarise(data,
orig_t1 = mean(avg_orig1))
by_condition
data <- group_by(data, condition)
by_condition <- summarise(data,
orig_t1 = mean(avg_orig1),
util_t1 = mean(avg_util1))
by_condition
data <- group_by(data, condition)
by_condition <- summarise(data,
orig_t1 = mean(avg_orig1),
util_t1 = mean(avg_util1),
orig_t2 = mean(avg_orig2),
util_t2 = mean(avg_util2))
by_condition
data <- group_by(data, condition)
by_condition <- summarise(data,
orig_t1 = mean(avg_orig1),
util_t1 = mean(avg_util1),
orig_t2 = mean(avg_orig2),
util_t2 = mean(avg_util2),
total1 = mean(total1),
total2 = mean(total2))
by_condition
data <- group_by(data, condition)
by_condition <- summarise(data,
orig_t1 = mean(avg_orig1),
util_t1 = mean(avg_util1),
orig_t2 = mean(avg_orig2),
util_t2 = mean(avg_util2),
total1 = mean(total1),
total2 = mean(total2),
delta = mean(delta))
by_condition
data <- group_by(data, condition)
by_condition <- summarise(data,
#mean ratings
orig_t1 = mean(avg_orig1),
sd_orig_t1 = sd(avg_orig1),
util_t1 = mean(avg_util1),
sd_util_t1 = sd(avg_util1),
orig_t2 = mean(avg_orig2),
sd_orig_t2 = sd(avg_orig2),
util_t2 = mean(avg_util2),
sd_util_t2 = sd(avg_util2),
total_avg1 = mean(total1),
sd_total_t1 = sd(total1),
total_avg2 = mean(total2),
sd_total_t2 = sd(total2)
delta_avg = mean(delta),
data <- group_by(data, condition)
by_condition <- summarise(data,
#mean ratings
orig_t1 = mean(avg_orig1),
sd_orig_t1 = sd(avg_orig1),
util_t1 = mean(avg_util1),
sd_util_t1 = sd(avg_util1),
orig_t2 = mean(avg_orig2),
sd_orig_t2 = sd(avg_orig2),
util_t2 = mean(avg_util2),
sd_util_t2 = sd(avg_util2),
total_avg1 = mean(total1),
sd_total_t1 = sd(total1),
total_avg2 = mean(total2),
sd_total_t2 = sd(total2),
delta_avg = mean(delta),
sd_delta = sd(delta))
by_condition
data <- group_by(data, condition)
aggregate <- summarise(data,
#mean ratings
orig_t1 = mean(avg_orig1),
sd_orig_t1 = sd(avg_orig1),
util_t1 = mean(avg_util1),
sd_util_t1 = sd(avg_util1),
orig_t2 = mean(avg_orig2),
sd_orig_t2 = sd(avg_orig2),
util_t2 = mean(avg_util2),
sd_util_t2 = sd(avg_util2),
total_avg1 = mean(total1),
sd_total_t1 = sd(total1),
total_avg2 = mean(total2),
sd_total_t2 = sd(total2),
delta_avg = mean(delta),
sd_delta = sd(delta))
aggregate
time <- summarise(data,
orig_t1 = mean(avg_orig1),
sd_orig_t1 = sd(avg_orig1),
util_t1 = mean(avg_util1),
sd_util_t1 = sd(avg_util1),
orig_t2 = mean(avg_orig2),
sd_orig_t2 = sd(avg_orig2),
util_t2 = mean(avg_util2),
sd_util_t2 = sd(avg_util2))
time
data <- group_by(data, condition)
aggregate <- summarise(data,
#mean ratings
total_avg1 = mean(total1),
sd_total_t1 = sd(total1),
total_avg2 = mean(total2),
sd_total_t2 = sd(total2),
delta_avg = mean(delta),
sd_delta = sd(delta))
aggregate
data <- group_by(data, condition)
aggregate <- summarise(data,
#mean ratings
total_avg1 = mean(total1),
sd_total_t1 = sd(total1),
se_total_t1 = sd_total_t1/sqrt(length(condition)),
total_avg2 = mean(total2),
sd_total_t2 = sd(total2),
se_total_t2 = sd_total_t2/sqrt(length(condition)),
delta_avg = mean(delta),
sd_delta = sd(delta),
se_delta = sd_delta/sqrt(length(condition)))
aggregate
time <- summarise(data,
orig_t1 = mean(avg_orig1),
sd_orig_t1 = sd(avg_orig1),
se_orig_t1 = sd_orig_t1/sqrt(length(condition)),
util_t1 = mean(avg_util1),
sd_util_t1 = sd(avg_util1),
se_util_t1 = sd_util_t1/sqrt(length(condition)),
orig_t2 = mean(avg_orig2),
sd_orig_t2 = sd(avg_orig2),
se_orig_t2 = sd_orig_t2/sqrt(length(condition)),
util_t2 = mean(avg_util2),
sd_util_t2 = sd(avg_util2),
se_util_t2 = sd_util_t1/sqrt(length(condition)))
time
#required libraries
library(ggplot2)
library(car)
library(dplyr)
library(lme4)
library(nlme)
library(reshape2)
library(pwr)
data <- read.table("order_study_data.csv", sep=",", header=TRUE)
head(data)
data <- read.table("order_study_data.csv", sep=",", header=TRUE)
head(data)
data <- read.table("order_study_data.csv", sep=",", header=TRUE)
head(data)
data <- group_by(data, condition)
aggregate <- summarise(data,
#mean ratings
avg_total_orig = mean(total_orig),
sd_total_orig = sd(total_orig),
se_total_orig = sd_total_orig/sqrt(length(condition)),
avg_total_util = mean(total_util),
sd_total_util = sd(total_util),
se_total_util = sd_total_util/sqrt(length(condition)),
avg_orig_perc = mean(percentile_orig),
sd_orig_perc = sd(percentile_orig),
se_orig_perc = sd_percentile_orig/sqrt(length(condition)),
avg_util_perc = mean(percentile_util),
sd_util_perc = sd(percentile_util),
se_util_perc = sd_percentile_util/sqrt(length(condition)))
data <- group_by(data, condition)
aggregate <- summarise(data,
#mean ratings
avg_total_orig = mean(total_orig),
sd_total_orig = sd(total_orig),
se_total_orig = sd_total_orig/sqrt(length(condition)),
avg_total_util = mean(total_util),
sd_total_util = sd(total_util),
se_total_util = sd_total_util/sqrt(length(condition)),
avg_orig_perc = mean(percentile_orig),
sd_orig_perc = sd(percentile_orig),
se_orig_perc = sd_orig_perc/sqrt(length(condition)),
avg_util_perc = mean(percentile_util),
sd_util_perc = sd(percentile_util),
se_util_perc = sd_percentile_util/sqrt(length(condition)))
data <- group_by(data, condition)
aggregate <- summarise(data,
#mean ratings
avg_total_orig = mean(total_orig),
sd_total_orig = sd(total_orig),
se_total_orig = sd_total_orig/sqrt(length(condition)),
avg_total_util = mean(total_util),
sd_total_util = sd(total_util),
se_total_util = sd_total_util/sqrt(length(condition)),
avg_orig_perc = mean(percentile_orig),
sd_orig_perc = sd(percentile_orig),
se_orig_perc = sd_orig_perc/sqrt(length(condition)),
avg_util_perc = mean(percentile_util),
sd_util_perc = sd(percentile_util),
se_util_perc = sd_util_perc/sqrt(length(condition)))
aggregate
time <- summarise(data,
orig_t1 = mean(avg_orig1),
sd_orig_t1 = sd(avg_orig1),
se_orig_t1 = sd_orig_t1/sqrt(length(condition)),
util_t1 = mean(avg_util1),
sd_util_t1 = sd(avg_util1),
se_util_t1 = sd_util_t1/sqrt(length(condition)),
orig_t2 = mean(avg_orig2),
sd_orig_t2 = sd(avg_orig2),
se_orig_t2 = sd_orig_t2/sqrt(length(condition)),
util_t2 = mean(avg_util2),
sd_util_t2 = sd(avg_util2),
se_util_t2 = sd_util_t1/sqrt(length(condition)))
time
shapiro.test(data$percentile_orig)
qqplot(data$percentile_orig)
qqPlot(data$percentile_orig)
qqPlot(data$total_orig)
shapiro.test(data$total_orig)
qqPlot(data$total_util)
